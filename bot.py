import requests
from telegram import Bot, Update, InputMediaPhoto, InputMediaVideo
from telegram.ext import Application, MessageHandler, CommandHandler, filters, CallbackContext
import asyncio
import nest_asyncio
import random
from keep_alive import keep_alive

# Cho ph√©p nest_asyncio ƒë·ªÉ tr√°nh xung ƒë·ªôt v√≤ng l·∫∑p
nest_asyncio.apply()

BOT_TOKEN = "8064426886:AAE5Zr980N-8LhGgnXGqUXwqlPthvdKA9H0"
API_KEY = "5d2e33c19847dea76f4fdb49695fd81aa669af86"
API_URL = "https://vuotlink.vip/api"

bot = Bot(token=BOT_TOKEN)
media_groups = {}
processing_tasks = {}

async def start(update: Update, context: CallbackContext):
    if not update.message or update.effective_chat.type != "private":
        return
    await update.message.reply_text(
        "**üëã Ch√†o m·ª´ng b·∫°n!üòç**\n"
        "**üîó G·ª≠i link b·∫•t k·ª≥ ƒë·ªÉ r√∫t g·ªçn.**\n"
        "**üì∑ Chuy·ªÉn ti·∫øp b√†i vi·∫øt k√®m ·∫£nh/video, bot s·∫Ω gi·ªØ nguy√™n caption & r√∫t g·ªçn link trong caption.**\n"
        "**üí¨ M·ªçi th·∫Øc m·∫Øc, h√£y li√™n h·ªá admin.**",
        parse_mode="Markdown"
    )

async def format_text(text: str) -> str:
    lines = text.splitlines()
    new_lines = []
    for line in lines:
        words = line.split()
        new_words = []
        for word in words:
            if word.startswith("http"):
                params = {"api": API_KEY, "url": word, "format": "text"}
                response = requests.get(API_URL, params=params)
                short_link = response.text.strip() if response.status_code == 200 else word
                word = f"<s>{short_link}</s>"
            else:
                word = f"<b>{word}</b>"
            new_words.append(word)
        new_lines.append(" ".join(new_words))

    new_lines.append(
        '\n<b>B√°o l·ªói + ƒë√≥ng g√≥p video t·∫°i ƒë√¢y</b> @nothinginthissss (c√≥ l·ªói s·∫Ω ƒë·ªÅn b√π)\n'
        '<b>Theo d√µi th√¥ng b√°o t·∫°i ƒë√¢y</b> @linkdinhcaovn\n'
        '<b>C√ÅCH XEM LINK(l·ªói bot kh√¥ng g·ª≠i video):</b> @HuongDanVuotLink_SachKhongChu\n\n'
        '‚ö†Ô∏è<b>K√™nh xem kh√¥ng c·∫ßn v∆∞·ª£t :</b> <a href="https://t.me/linkdinhcaovn/4">·∫•n v√†o ƒë√¢y</a>'
    )

    return "\n".join(new_lines)

async def process_media_group(mgid: str, chat_id: int):
    await asyncio.sleep(random.uniform(3, 5))
    group = media_groups.pop(mgid, [])
    if not group:
        await bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è B√†i vi·∫øt kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu ·∫£nh/video.")
        return

    group.sort(key=lambda m: m.message_id)
    caption = await format_text(group[0].caption) if group[0].caption else None
    media = []

    for i, msg in enumerate(group):
        if msg.photo:
            file_id = msg.photo[-1].file_id
            media.append(InputMediaPhoto(file_id, caption=caption if i == 0 else None, parse_mode="HTML"))
        elif msg.video:
            file_id = msg.video.file_id
            media.append(InputMediaVideo(file_id, caption=caption if i == 0 else None, parse_mode="HTML"))

    if not media:
        await bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è B√†i vi·∫øt kh√¥ng c√≥ ·∫£nh ho·∫∑c video h·ª£p l·ªá.")
        return

    try:
        total = len(media)
        status_message = await bot.send_message(chat_id=chat_id, text=f"üì§ ƒêang g·ª≠i b√†i vi·∫øt: 0/{total} ·∫£nh/video...")
        await bot.send_media_group(chat_id=chat_id, media=media)
        await status_message.edit_text(f"‚úÖ ƒê√£ g·ª≠i xong {total}/{total} ·∫£nh/video!")
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ª≠i media_group: {e}")
        await bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è G·ª≠i b√†i vi·∫øt th·∫•t b·∫°i. C√≥ th·ªÉ do file l·ªói ho·∫∑c Telegram b·ªã gi·ªõi h·∫°n.")

async def shorten_link(update: Update, context: CallbackContext):
    if not update.message or update.effective_chat.type != "private":
        return

    if update.message.media_group_id:
        mgid = update.message.media_group_id
        if mgid not in media_groups:
            media_groups[mgid] = []
            processing_tasks[mgid] = asyncio.create_task(process_media_group(mgid, update.effective_chat.id))
        media_groups[mgid].append(update.message)
        return

    # N·∫øu ch·ªâ c√≥ 1 ·∫£nh ho·∫∑c 1 video ri√™ng l·∫ª
    if update.message.photo or update.message.video:
        caption = update.message.caption or ""
        if caption:
            new_caption = await format_text(caption)
            try:
                if update.message.photo:
                    await bot.send_photo(chat_id=update.effective_chat.id, photo=update.message.photo[-1].file_id, caption=new_caption, parse_mode="HTML")
                else:
                    await bot.send_video(chat_id=update.effective_chat.id, video=update.message.video.file_id, caption=new_caption, parse_mode="HTML")
            except Exception as e:
                print(f"‚ùå L·ªói g·ª≠i 1 ·∫£nh/video: {e}")
        return

    # N·∫øu l√† text ch·ª©a link
    if update.message.text:
        if "http" in update.message.text:
            params = {"api": API_KEY, "url": update.message.text.strip(), "format": "text"}
            response = requests.get(API_URL, params=params)
            if response.status_code == 200:
                short_link = response.text.strip()
                message = (
                    "üì¢ <b>B·∫°n c√≥ link r√∫t g·ªçn m·ªõi</b>\n"
                    f"üîó <b>Link g·ªëc:</b> <s>{update.message.text}</s>\n"
                    f"üîç <b>Link r√∫t g·ªçn:</b> {short_link}\n\n"
                    '‚ö†Ô∏è<b>K√™nh xem kh√¥ng c·∫ßn v∆∞·ª£t :</b> <a href="https://t.me/sachkhongchuu/299">·∫•n v√†o ƒë√¢y</a>'
                )
                await update.message.reply_text(message, parse_mode="HTML")
            return
        else:
            # N·∫øu l√† vƒÉn b·∫£n kh√¥ng ch·ª©a link th√¨ ƒë·ªãnh d·∫°ng ƒë·∫≠m
            formatted_text = await format_text(update.message.text)
            await update.message.reply_text(formatted_text, parse_mode="HTML")

    # N·∫øu l√† b√†i vi·∫øt chuy·ªÉn ti·∫øp
    if update.message.forward_origin:
        caption = update.message.caption or ""
        new_caption = await format_text(caption)
        await update.message.copy(chat_id=update.effective_chat.id, caption=new_caption, parse_mode="HTML")

def main():
    # 1) Gi·ªØ bot lu√¥n "s·ªëng" qua Flask
    keep_alive()

    # 2) Kh·ªüi t·∫°o v√† ƒëƒÉng k√Ω handlers
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.ALL, shorten_link))

    print("‚úÖ Bot ƒëang ch·∫°y...")

    # 3) B·∫Øt ƒë·∫ßu polling, kh√¥ng ƒë√≥ng loop khi k·∫øt th√∫c
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
