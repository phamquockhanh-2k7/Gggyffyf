import requests
from telegram import Bot, Update, InputMediaPhoto, InputMediaVideo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, CommandHandler, CallbackContext, CallbackQueryHandler, filters
import asyncio
import nest_asyncio
import random
from keep_alive import keep_alive
import time

# Cho ph√©p nest_asyncio ƒë·ªÉ tr√°nh xung ƒë·ªôt v√≤ng l·∫∑p
nest_asyncio.apply()

BOT_TOKEN = "8064426886:AAE5Zr980N-8LhGgnXGqUXwqlPthvdKA9H0"
API_KEY = "5d2e33c19847dea76f4fdb49695fd81aa669af86"
API_URL = "https://vuotlink.vip/api"

bot = Bot(token=BOT_TOKEN)
media_groups = {}
processing_tasks = {}
user_modes = {}  # D√πng ƒë·ªÉ l∆∞u tr·ªØ ch·∫ø ƒë·ªô c·ªßa ng∆∞·ªùi d√πng
user_last_password_time = {}  # L∆∞u th·ªùi gian m·∫≠t kh·∫©u ƒë∆∞·ª£c reset

# Reset m·∫≠t kh·∫©u m·ªói 24h
def reset_password(user_id):
    if user_id in user_last_password_time:
        last_reset = user_last_password_time[user_id]
        if time.time() - last_reset > 86400:  # 24 hours in seconds
            user_modes.pop(user_id, None)
            user_last_password_time[user_id] = time.time()
            return True
    else:
        user_last_password_time[user_id] = time.time()
    return False

async def start(update: Update, context: CallbackContext):
    if not update.message or update.effective_chat.type != "private":
        return

    keyboard = [
        [
            InlineKeyboardButton("R√∫t g·ªçn link", callback_data="shorten"),
            InlineKeyboardButton("Link Free", callback_data="free"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "Ch·ªçn ch·∫ø ƒë·ªô s·ª≠ d·ª•ng bot:\n1. R√∫t g·ªçn link\n2. Link Free (Ch·ªâ g·ª≠i l·∫°i b√†i vi·∫øt nguy√™n g·ªëc)",
        reply_markup=reply_markup
    )

async def set_mode(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = update.effective_user.id
    mode = query.data

    if mode == "shorten":
        user_modes[user_id] = "shorten"
        await query.answer(text="B·∫°n ƒë√£ ch·ªçn ch·∫ø ƒë·ªô 'R√∫t g·ªçn link'.")
    elif mode == "free":
        user_modes[user_id] = "free"
        await query.answer(text="B·∫°n ƒë√£ ch·ªçn ch·∫ø ƒë·ªô 'Link Free'.")

    # Sau khi ch·ªçn ch·∫ø ƒë·ªô, y√™u c·∫ßu m·∫≠t kh·∫©u
    await query.message.reply_text("H√£y nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ s·ª≠ d·ª•ng bot. Chi ti·∫øt li√™n h·ªá: @nothinginthissss")

async def password(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in user_modes:
        return

    if update.message.text == "2703":
        if reset_password(user_id):
            await update.message.reply_text("M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c reset. B·∫°n c·∫ßn nh·∫≠p l·∫°i sau 24h.")
        
        mode = user_modes[user_id]
        await update.message.reply_text(f"B·∫°n ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi ch·∫ø ƒë·ªô: {mode}. H√£y ti·∫øp t·ª•c g·ª≠i b√†i vi·∫øt ƒë·ªÉ bot x·ª≠ l√Ω.")

    else:
        await update.message.reply_text("M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c. Vui l√≤ng th·ª≠ l·∫°i.")

async def format_text(text: str) -> str:
    lines = text.splitlines()
    new_lines = []
    found_link = False
    
    for line in lines:
        # T√°ch c√°c t·ª´ trong d√≤ng
        words = line.split()
        new_words = []
        for word in words:
            # Ki·ªÉm tra xem t·ª´ c√≥ ph·∫£i l√† link https:// kh√¥ng
            if word.startswith("https://") and not found_link:
                # Ch√®n link nh√∫ng tr∆∞·ªõc link https ƒë·∫ßu ti√™n
                new_words.append('<a href="https://xclassvnxyz.vercel.app/">Link nh√∫ng</a>')
                found_link = True  # ƒê·∫£m b·∫£o ch·ªâ ch√®n m·ªôt l·∫ßn
                
            # N·∫øu l√† link, r√∫t g·ªçn n√≥
            if word.startswith("http"):
                params = {"api": API_KEY, "url": word, "format": "text"}
                response = requests.get(API_URL, params=params)
                short_link = response.text.strip() if response.status_code == 200 else word
                word = f"<s>{short_link}</s>"
            # ƒê·∫∑t vƒÉn b·∫£n b√¥i ƒë·∫≠m
            else:
                word = f"<b>{word}</b>"
            new_words.append(word)
        
        new_lines.append(" ".join(new_words))

    new_lines.append(
        '\n<b>B√°o l·ªói + ƒë√≥ng g√≥p video t·∫°i ƒë√¢y</b> @nothinginthissss (c√≥ l·ªói s·∫Ω ƒë·ªÅn b√π)\n'
        '<b>Theo d√µi th√¥ng b√°o t·∫°i ƒë√¢y</b> @linkdinhcaovn\n'
        '<b>C√ÅCH XEM LINK(l·ªói bot kh√¥ng g·ª≠i video):</b> @HuongDanVuotLink_SachKhongChu\n\n'
        '‚ö†Ô∏è<b>K√™nh xem kh√¥ng c·∫ßn v∆∞·ª£t :</b> <a href="https://t.me/linkdinhcaovn/4">·∫•n v√†o ƒë√¢y!</a>'
    )

    return "\n".join(new_lines)

async def process_media_group(mgid: str, chat_id: int, mode: str):
    await asyncio.sleep(random.uniform(3, 5))
    group = media_groups.pop(mgid, [])
    if not group:
        await bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è B√†i vi·∫øt kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu ·∫£nh/video.")
        return

    group.sort(key=lambda m: m.message_id)
    caption = await format_text(group[0].caption) if group[0].caption else None
    media = []

    for i, msg in enumerate(group):
        if msg.photo:
            file_id = msg.photo[-1].file_id
            media.append(InputMediaPhoto(file_id, caption=caption if i == 0 else None, parse_mode="HTML"))
        elif msg.video:
            file_id = msg.video.file_id
            media.append(InputMediaVideo(file_id, caption=caption if i == 0 else None, parse_mode="HTML"))

    if mode == "free":
        # N·∫øu ch·∫ø ƒë·ªô l√† Link Free, ch·ªâ g·ª≠i l·∫°i b√†i vi·∫øt nguy√™n g·ªëc
        for msg in group:
            await msg.copy(chat_id=chat_id)
    else:
        # N·∫øu ch·∫ø ƒë·ªô l√† R√∫t g·ªçn link, g·ª≠i b√†i vi·∫øt ƒë√£ x·ª≠ l√Ω
        if not media:
            await bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è B√†i vi·∫øt kh√¥ng c√≥ ·∫£nh ho·∫∑c video h·ª£p l·ªá.")
            return

        try:
            await bot.send_media_group(chat_id=chat_id, media=media)
        except Exception as e:
            print(f"L·ªói khi g·ª≠i media_group: {e}")
            await bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è G·ª≠i b√†i vi·∫øt th·∫•t b·∫°i. C√≥ th·ªÉ do file l·ªói ho·∫∑c Telegram b·ªã gi·ªõi h·∫°n.")

async def shorten_link(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    # Ki·ªÉm tra ch·∫ø ƒë·ªô c·ªßa ng∆∞·ªùi d√πng
    if user_id not in user_modes:
        return

    mode = user_modes[user_id]
    
    if update.message.media_group_id:
        mgid = update.message.media_group_id
        if mgid not in media_groups:
            media_groups[mgid] = []
            processing_tasks[mgid] = asyncio.create_task(process_media_group(mgid, update.effective_chat.id, mode))
        media_groups[mgid].append(update.message)
        return

    if update.message.text and update.message.text.startswith("http"):
        params = {"api": API_KEY, "url": update.message.text.strip(), "format": "text"}
        response = requests.get(API_URL, params=params)
        if response.status_code == 200:
            short_link = response.text.strip()
            message = (
                "üì¢ <b>B·∫°n c√≥ link r√∫t g·ªçn m·ªõi</b>\n"
                f"üîó <b>Link g·ªëc:</b> <s>{update.message.text}</s>\n"
                f"üîç <b>Link r√∫t g·ªçn:</b> {short_link}\n\n"
                '‚ö†Ô∏è<b>K√™nh xem kh√¥ng c·∫ßn v∆∞·ª£t :</b> <a href="https://t.me/sachkhongchuu/299">·∫•n v√†o ƒë√¢y</a>'
            )
            await update.message.reply_text(message, parse_mode="HTML")
        return

    if update.message.forward_origin:
        caption = update.message.caption or ""
        new_caption = await format_text(caption)
        await update.message.copy(chat_id=update.effective_chat.id, caption=new_caption, parse_mode="HTML")

def main():
    # 1) Gi·ªØ bot lu√¥n "s·ªëng" qua Flask
    keep_alive()

    # 2) Kh·ªüi t·∫°o v√† ƒëƒÉng k√Ω handlers
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setmode", set_mode))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, shorten_link))
    app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.FORWARDED, shorten_link))
    app.add_handler(MessageHandler(filters.TEXT, password))

    # 3) B·∫Øt ƒë·∫ßu polling, kh√¥ng ƒë√≥ng loop khi k·∫øt th√∫c
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
