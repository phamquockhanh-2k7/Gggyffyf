import random
import string
import requests
import asyncio
from flask import Flask, request
from threading import Thread
from telegram import Update, InputMediaPhoto, InputMediaVideo, InputMediaDocument, InlineKeyboardMarkup, InlineKeyboardButton, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# C·∫•u h√¨nh
BOT_TOKEN = "7728975615:AAEsj_3faSR_97j4-GW_oYnOy1uYhNuuJP0"
FIREBASE_URL = "https://bot-telegram-99852-default-rtdb.firebaseio.com"
PORT = 8000  # Port b·∫Øt bu·ªôc cho Koyeb
WEBHOOK_URL = "https://bewildered-wenda-happyboy2k777-413cd6df.koyeb.app"  # URL webhook c·ªßa b·∫°n

# Kh·ªüi t·∫°o Flask
web_server = Flask(__name__)
user_sessions = {}
media_groups = {}

@web_server.route('/')
def home():
    return "üü¢ Bot ƒëang ho·∫°t ƒë·ªông"

def generate_alias():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=12))

# H√†m set webhook
def set_webhook():
    bot = Bot(token=BOT_TOKEN)
    webhook_url = f"{WEBHOOK_URL}/{BOT_TOKEN}"
    response = bot.set_webhook(webhook_url)
    
    if response:
        print("Webhook ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh th√†nh c√¥ng")
    else:
        print("Kh√¥ng th·ªÉ c·∫•u h√¨nh webhook")

# X·ª≠ l√Ω l·ªánh /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    args = context.args

    # Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ t·ªìn t·∫°i trong h·ªá th·ªëng hay ch∆∞a, n·∫øu ch∆∞a th√¨ l∆∞u v√†o
    user_url = f"{FIREBASE_URL}/users/{user_id}.json"
    user_data = requests.get(user_url).json()

    if not user_data:
        requests.put(user_url, json={})

    if args:
        try:
            alias = args[0]
            response = requests.get(f"{FIREBASE_URL}/{alias}.json").json()

            files = response if isinstance(response, list) else \
                      [v for _, v in sorted(response.items(), key=lambda x: int(x[0]))] if response else []

            if not files:
                raise ValueError("N·ªôi dung kh√¥ng t·ªìn t·∫°i")

            text_list = []
            media_group = []

            for item in files:
                if item['type'] == 'text':
                    text_list.append(item['file_id'])
                else:
                    media_class = {
                        'photo': InputMediaPhoto,
                        'video': InputMediaVideo,
                        'document': InputMediaDocument
                    }[item['type']]
                    media_group.append(media_class(item['file_id']))

            # G·ª≠i text n·∫øu c√≥
            for text in text_list:
                await update.message.reply_text(
                    text=text,
                    protect_content=True,
                    disable_web_page_preview=True
                )

            # G·ª≠i media theo nh√≥m 10
            for i in range(0, len(media_group), 10):
                await update.message.reply_media_group(
                    media=media_group[i:i+10],
                    protect_content=True
                )
                await asyncio.sleep(1)

            await update.message.reply_text(f"üìå B√≠ danh: <code>{alias}</code>", parse_mode="HTML")

        except Exception as e:
            await update.message.reply_text(f"‚ùå L·ªói: {str(e)}")
        return

    # N·∫øu kh√¥ng c√≥ alias
    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("üì§ T·∫°o b√†i vi·∫øt m·ªõi", callback_data="newpost"),
        InlineKeyboardButton("üåê Truy c·∫≠p bot", url="https://t.me/filebotstorage_bot")
    ]])
    await update.message.reply_text("üëã Xin ch√†o! H√£y ch·ªçn thao t√°c b√™n d∆∞·ªõi:", reply_markup=keyboard)

# X·ª≠ l√Ω l·ªánh t·∫°o b√†i vi·∫øt m·ªõi
async def newpost(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_sessions[user_id] = []
    await update.message.reply_text("üì§ G·ª≠i n·ªôi dung (·∫£nh/video/file/text) v√† nh·∫•n /done khi xong")

# X·ª≠ l√Ω n·ªôi dung ng∆∞·ªùi d√πng g·ª≠i
async def handle_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in user_sessions:
        await start(update, context)
        return

    if update.message.media_group_id:
        mgid = update.message.media_group_id
        if mgid not in media_groups:
            media_groups[mgid] = []
            asyncio.create_task(process_media_group(mgid, user_id))
        media_groups[mgid].append(update.message)
        return

    content = {}

    if update.message.text:
        content = {'type': 'text', 'file_id': update.message.text}
    elif update.message.document:
        content = {'type': 'document', 'file_id': update.message.document.file_id}
    elif update.message.photo:
        content = {'type': 'photo', 'file_id': update.message.photo[-1].file_id}
    elif update.message.video:
        content = {'type': 'video', 'file_id': update.message.video.file_id}

    if content:
        user_sessions[user_id].append(content)

# X·ª≠ l√Ω media group
async def process_media_group(mgid: str, user_id: int):
    await asyncio.sleep(2)
    group = sorted(media_groups.pop(mgid, []), key=lambda x: x.message_id)

    for msg in group:
        if msg.photo:
            user_sessions[user_id].append({
                'type': 'photo',
                'file_id': msg.photo[-1].file_id
            })
        elif msg.video:
            user_sessions[user_id].append({
                'type': 'video',
                'file_id': msg.video.file_id
            })

# X·ª≠ l√Ω l·ªánh /done
async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    session = user_sessions.pop(user_id, None)

    if not session:
        await update.message.reply_text("‚ùå Ch∆∞a c√≥ n·ªôi dung")
        return

    try:
        alias = generate_alias()
        response = requests.put(f"{FIREBASE_URL}/{alias}.json", json=session)

        if response.status_code != 200:
            raise ConnectionError("L·ªói k·∫øt n·ªëi Firebase")

        bot_username = (await context.bot.get_me()).username
        await update.message.reply_text(
            f"‚úÖ T·∫°o th√†nh c√¥ng!\n"
            f"üîó Link: https://t.me/{bot_username}?start={alias}\n"
            f"üìå B√≠ danh: <code>{alias}</code>",
            parse_mode="HTML"
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói h·ªá th·ªëng: {str(e)}")

# L·ªánh ki·ªÉm tra s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng trong Firebase
async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng t·ª´ Firebase
        response = requests.get(f"{FIREBASE_URL}/users.json").json()
        
        # N·∫øu c√≥ ng∆∞·ªùi d√πng, tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng
        if response:
            user_count = len(response)
            await update.message.reply_text(f"üßë‚Äçüíª S·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng ƒë√£ l∆∞u: {user_count}")
        else:
            await update.message.reply_text("üö´ Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng: {str(e)}")

# Flask route ƒë·ªÉ x·ª≠ l√Ω c√°c c·∫≠p nh·∫≠t t·ª´ Telegram
@web_server.route(f"/{BOT_TOKEN}", methods=['POST'])
def webhook():
    json_str = request.get_data().decode('UTF-8')
    update = Update.de_json(json_str, Bot(token=BOT_TOKEN))
    application.process_update(update)
    return 'OK'

# Ch·∫°y bot v√† c·∫•u h√¨nh webhook
def run_bot():
    # C·∫•u h√¨nh Webhook
    set_webhook()
    
    # B·∫Øt ƒë·∫ßu ch·∫°y Flask server
    Thread(target=web_server.run, kwargs={'host':'0.0.0.0','port':PORT}).start()
    
    # Kh·ªüi t·∫°o Telegram bot
    app = Application.builder().token(BOT_TOKEN).read_timeout(60).write_timeout(60).build()

    # Th√™m c√°c handler
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("done", done))
    app.add_handler(CommandHandler("newpost", newpost))  # L·ªánh ·∫©n
    app.add_handler(CommandHandler("check", check))  # L·ªánh ki·ªÉm tra s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng
    app.add_handler(MessageHandler(filters.ALL, handle_content))

    print("ü§ñ Bot ƒëang ho·∫°t ƒë·ªông v·ªõi Webhook...")
    app.run_polling()

if __name__ == '__main__':
    run_bot()
