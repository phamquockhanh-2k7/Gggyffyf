import requests
from telegram import Bot, Update, InputMediaPhoto, InputMediaVideo
from telegram.ext import Application, MessageHandler, CommandHandler, filters, CallbackContext
from flask import Flask, request
import telegram
import nest_asyncio
import asyncio
import random
from keep_alive import keep_alive

# Cho ph√©p nest_asyncio ƒë·ªÉ tr√°nh xung ƒë·ªôt v√≤ng l·∫∑p
nest_asyncio.apply()

# C·∫•u h√¨nh bot
BOT_TOKEN = "8064426886:AAFAWxoIKjiyTGG_DxcXFXDUizHZyANldE4"
API_KEY = "5d2e33c19847dea76f4fdb49695fd81aa669af86"
API_URL = "https://vuotlink.vip/api"

# Kh·ªüi t·∫°o bot v√† Flask
bot = Bot(token=BOT_TOKEN)
app = Flask(__name__)

media_groups = {}
processing_tasks = {}

# H√†m format l·∫°i text v√† r√∫t g·ªçn link
async def format_text(text: str) -> str:
    lines = text.splitlines()
    new_lines = []
    for line in lines:
        words = line.split()
        new_words = []
        for word in words:
            if word.startswith("http"):
                params = {"api": API_KEY, "url": word, "format": "text"}
                response = requests.get(API_URL, params=params)
                short_link = response.text.strip() if response.status_code == 200 else word
                word = f"<s>{short_link}</s>"
            else:
                word = f"<b>{word}</b>"
            new_words.append(word)
        new_lines.append(" ".join(new_words))

    new_lines.append(
        '\n<b>B√°o l·ªói + ƒë√≥ng g√≥p video t·∫°i ƒë√¢y</b> @nothinginthissss (c√≥ l·ªói s·∫Ω ƒë·ªÅn b√π)\n'
        '<b>Theo d√µi th√¥ng b√°o t·∫°i ƒë√¢y</b> @sachkhongchuu\n'
        '<b>C√ÅCH XEM LINK(l·ªói bot kh√¥ng g·ª≠i video):</b> @HuongDanVuotLink_SachKhongChu\n\n'
        '‚ö†Ô∏è<b>K√™nh xem kh√¥ng c·∫ßn  v∆∞·ª£t :</b> <a href="https://t.me/sachkhongchuu/299">·∫•n v√†o ƒë√¢y</a>'
    )

    return "\n".join(new_lines)

# H√†m x·ª≠ l√Ω nh√≥m media
async def process_media_group(mgid: str, chat_id: int):
    await asyncio.sleep(random.uniform(3, 5))
    group = media_groups.pop(mgid, [])
    if not group:
        await bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è B√†i vi·∫øt kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu ·∫£nh/video.")
        return

    group.sort(key=lambda m: m.message_id)
    caption = await format_text(group[0].caption) if group[0].caption else None
    media = []

    for i, msg in enumerate(group):
        if msg.photo:
            file_id = msg.photo[-1].file_id
            media.append(InputMediaPhoto(file_id, caption=caption if i == 0 else None, parse_mode="HTML"))
        elif msg.video:
            file_id = msg.video.file_id
            media.append(InputMediaVideo(file_id, caption=caption if i == 0 else None, parse_mode="HTML"))

    if not media:
        await bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è B√†i vi·∫øt kh√¥ng c√≥ ·∫£nh ho·∫∑c video h·ª£p l·ªá.")
        return

    try:
        await bot.send_media_group(chat_id=chat_id, media=media)
    except Exception as e:
        print(f"L·ªói khi g·ª≠i media_group: {e}")
        await bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è G·ª≠i b√†i vi·∫øt th·∫•t b·∫°i. C√≥ th·ªÉ do file l·ªói ho·∫∑c Telegram b·ªã gi·ªõi h·∫°n.")

# H√†m r√∫t g·ªçn link v√† x·ª≠ l√Ω vƒÉn b·∫£n
async def shorten_link(update: Update, context: CallbackContext):
    if not update.message or update.effective_chat.type != "private":
        return

    if update.message.media_group_id:
        mgid = update.message.media_group_id
        if mgid not in media_groups:
            media_groups[mgid] = []
            processing_tasks[mgid] = asyncio.create_task(process_media_group(mgid, update.effective_chat.id))
        media_groups[mgid].append(update.message)
        return

    if update.message.text and update.message.text.startswith("http"):
        params = {"api": API_KEY, "url": update.message.text.strip(), "format": "text"}
        response = requests.get(API_URL, params=params)
        if response.status_code == 200:
            short_link = response.text.strip()
            message = (
                "üì¢ <b>B·∫°n c√≥ link r√∫t g·ªçn m·ªõi</b>\n"
                f"üîó <b>Link g·ªëc:</b> <s>{update.message.text}</s>\n"
                f"üîç <b>Link r√∫t g·ªçn:</b> {short_link}\n\n"
                '‚ö†Ô∏è<b>K√™nh xem kh√¥ng c·∫ßn v∆∞·ª£t :</b> <a href="https://t.me/sachkhongchuu/299">·∫•n v√†o ƒë√¢y</a>'
            )
            await update.message.reply_text(message, parse_mode="HTML")
        return

    if update.message.forward_origin:
        caption = update.message.caption or ""
        new_caption = await format_text(caption)
        await update.message.copy(chat_id=update.effective_chat.id, caption=new_caption, parse_mode="HTML")

# C·∫•u h√¨nh Flask ƒë·ªÉ ti·∫øp nh·∫≠n webhook
@app.route(f'/webhook/{BOT_TOKEN}', methods=['POST'])
def webhook():
    json_str = request.get_data().decode("UTF-8")
    update = telegram.Update.de_json(json_str, bot)
    # X·ª≠ l√Ω update ·ªü ƒë√¢y
    asyncio.run(shorten_link(update, None))  # Thay th·∫ø logic x·ª≠ l√Ω khi c√≥ update
    return 'OK'

# C·∫•u h√¨nh webhook v·ªõi Telegram API
def set_webhook():
    WEBHOOK_URL = f"https://bewildered-wenda-happyboy2k777-413cd6df.koyeb.app/webhook/{BOT_TOKEN}"
    bot.set_webhook(WEBHOOK_URL)

# Ch·∫°y Flask server v√† webhook
if __name__ == "__main__":
    keep_alive()
    set_webhook()
    app.run(host='0.0.0.0', port=8000)
