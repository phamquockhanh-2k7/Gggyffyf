import random
import string
import requests
import asyncio
from flask import Flask, request
from threading import Thread
import time

from telegram import Update, InputMediaPhoto, InputMediaVideo, InlineKeyboardMarkup, InlineKeyboardButton, Bot
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# C·∫•u h√¨nh
BOT_TOKEN    = "7728975615:AAEsj_3faSR_97j4-GW_oYnOy1uYhNuuJP0"
FIREBASE_URL = "https://bot-telegram-99852-default-rtdb.firebaseio.com"
PORT         = 8000  # Port b·∫Øt bu·ªôc cho Koyeb
WEBHOOK_URL  = "https://bewildered-wenda-happyboy2k777-413cd6df.koyeb.app"

# Kh·ªüi t·∫°o Flask v√† l∆∞u session
web_server    = Flask(__name__)
user_sessions = {}
media_groups  = {}

# T·∫°o application to√†n c·ª•c ƒë·ªÉ d√πng c·∫£ trong webhook v√† run_bot
application = Application.builder().token(BOT_TOKEN).build()

@web_server.route('/')
def home():
    return "üü¢ Bot ƒëang ho·∫°t ƒë·ªông"

def generate_alias():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=12))

def set_webhook():
    bot = Bot(token=BOT_TOKEN)
    webhook_url = f"{WEBHOOK_URL}/{BOT_TOKEN}"
    if bot.set_webhook(webhook_url):
        print("Webhook ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh th√†nh c√¥ng")
    else:
        print("Kh√¥ng th·ªÉ c·∫•u h√¨nh webhook")

def save_user_file(user_id, file_id, file_type):
    url = f"{FIREBASE_URL}/users/{user_id}/files.json"
    try:
        res = requests.get(url)
        files = res.json() or {}
        new_index = len(files)
    except:
        new_index = 0
    data = {"file_id": file_id, "type": file_type}
    requests.patch(url, json={str(new_index): data})

def save_shared_files(alias, files_data):
    shared_url = f"{FIREBASE_URL}/shared/{alias}.json"
    response = requests.put(shared_url, json=files_data)
    if response.status_code != 200:
        print("L·ªói khi l∆∞u alias v√†o /shared")
    else:
        print(f"Alias {alias} ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o /shared")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    args = context.args

    # ƒë·∫£m b·∫£o user ƒë√£ c√≥ entry trong Firebase
    user_url  = f"{FIREBASE_URL}/users/{user_id}.json"
    user_data = requests.get(user_url).json()
    if not user_data:
        requests.put(user_url, json={})

    if args:
        alias    = args[0]
        response = requests.get(f"{FIREBASE_URL}/shared/{alias}.json").json()
        files = (response if isinstance(response, list)
                 else [v for _, v in sorted(response.items(), key=lambda x: int(x[0]))]
                 if response else [])
        if not files:
            await update.message.reply_text("‚ùå N·ªôi dung kh√¥ng t·ªìn t·∫°i")
            return

        text_list  = []
        media_group = []

        for item in files:
            if item['type'] == 'text':
                text_list.append(item['file_id'])
            else:
                cls = {'photo': InputMediaPhoto, 'video': InputMediaVideo}[item['type']]
                media_group.append(cls(item['file_id']))

        for text in text_list:
            await update.message.reply_text(
                text=text,
                protect_content=True,
                disable_web_page_preview=True
            )

        for i in range(0, len(media_group), 10):
            await update.message.reply_media_group(
                media=media_group[i:i+10],
                protect_content=True
            )
            await asyncio.sleep(1)

        await update.message.reply_text(
            f"üìå B√≠ danh: <code>{alias}</code>",
            parse_mode="HTML"
        )
        return

    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("üì§ T·∫°o b√†i vi·∫øt m·ªõi", callback_data="newpost"),
        InlineKeyboardButton("üåê Truy c·∫≠p bot", url="https://t.me/filebotstorage_bot")
    ]])
    await update.message.reply_text(
        "üëã Xin ch√†o! H√£y ch·ªçn thao t√°c b√™n d∆∞·ªõi:",
        reply_markup=keyboard
    )

async def newpost(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_sessions[user_id] = []

    # n·∫øu t·ª´ callback query
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            "üì§ G·ª≠i n·ªôi dung (·∫£nh/video) v√† nh·∫•n /done khi xong"
        )
    else:
        await update.message.reply_text(
            "üì§ G·ª≠i n·ªôi dung (·∫£nh/video) v√† nh·∫•n /done khi xong"
        )

async def handle_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_sessions:
        await start(update, context)
        return

    if update.message.media_group_id:
        mgid = update.message.media_group_id
        if mgid not in media_groups:
            media_groups[mgid] = []
            asyncio.create_task(process_media_group(mgid, user_id))
        media_groups[mgid].append(update.message)
        return

    content = {}
    if update.message.text:
        content = {'type': 'text', 'file_id': update.message.text}
    elif update.message.photo:
        content = {'type': 'photo', 'file_id': update.message.photo[-1].file_id}
    elif update.message.video:
        content = {'type': 'video', 'file_id': update.message.video.file_id}

    if content:
        user_sessions[user_id].append(content)

async def process_media_group(mgid: str, user_id: int):
    await asyncio.sleep(2)
    group = sorted(media_groups.pop(mgid, []), key=lambda x: x.message_id)
    for msg in group:
        if msg.photo:
            user_sessions[user_id].append({
                'type': 'photo',
                'file_id': msg.photo[-1].file_id
            })
        elif msg.video:
            user_sessions[user_id].append({
                'type': 'video',
                'file_id': msg.video.file_id
            })

async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = user_sessions.pop(user_id, None)
    if not session:
        await update.message.reply_text("‚ùå Ch∆∞a c√≥ n·ªôi dung")
        return

    try:
        alias = generate_alias()
        save_shared_files(alias, session)
        resp = requests.put(
            f"{FIREBASE_URL}/users/{user_id}/files/{alias}.json",
            json=session
        )
        if resp.status_code != 200:
            raise ConnectionError("L·ªói k·∫øt n·ªëi Firebase")

        bot_username = (await context.bot.get_me()).username
        await update.message.reply_text(
            f"‚úÖ T·∫°o th√†nh c√¥ng!\n"
            f"üîó Link: https://t.me/{bot_username}?start={alias}\n"
            f"üìå B√≠ danh: <code>t.me/upbaiviet_bot?start={alias}</code>",
            parse_mode="HTML"
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói h·ªá th·ªëng: {e}")

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = requests.get(f"{FIREBASE_URL}/users.json").json()
        if response:
            await update.message.reply_text(f"üßë‚Äçüíª S·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng ƒë√£ l∆∞u: {len(response)}")
        else:
            await update.message.reply_text("üö´ Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng: {e}")

@web_server.route(f"/{BOT_TOKEN}", methods=['POST'])
def webhook():
    json_str = request.get_data().decode('UTF-8')
    update   = Update.de_json(json_str, Bot(token=BOT_TOKEN))
    application.process_update(update)
    return 'OK'

def run_bot():
    set_webhook()
    # Ch·∫°y Flask tr√™n host 0.0.0.0 v√† port ƒë·ªãnh s·∫µn
    Thread(target=lambda: web_server.run(host="0.0.0.0", port=PORT)).start()
    # Gi·ªØ ch∆∞∆°ng tr√¨nh kh√¥ng exit
    while True:
        time.sleep(10)

# ƒêƒÉng k√Ω c√°c handler (bao g·ªìm c·∫£ callback query)
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(newpost, pattern="^newpost$"))
application.add_handler(CommandHandler("newpost", newpost))
application.add_handler(CommandHandler("check", check))
application.add_handler(CommandHandler("done", done))
application.add_handler(MessageHandler(filters.TEXT | filters.PHOTO | filters.VIDEO, handle_content))

if __name__ == '__main__':
    run_bot()
