import random
import string
import requests
import asyncio
from flask import Flask, request
from threading import Thread
from telegram import Update, InputMediaPhoto, InputMediaVideo, InlineKeyboardMarkup, InlineKeyboardButton, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# C·∫•u h√¨nh
BOT_TOKEN = "7728975615:AAEsj_3faSR_97j4-GW_oYnOy1uYhNuuJP0"
FIREBASE_URL = "https://bot-telegram-99852-default-rtdb.firebaseio.com"
PORT = 8000
WEBHOOK_URL = "https://bewildered-wenda-happyboy2k777-413cd6df.koyeb.app"

# Kh·ªüi t·∫°o Flask
web_server = Flask(__name__)
user_sessions = {}
media_groups = {}

# Kh·ªüi t·∫°o Telegram Application
application = Application.builder().token(BOT_TOKEN).build()

def generate_alias():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=12))

def save_user_file(user_id, file_id, file_type):
    url = f"{FIREBASE_URL}/users/{user_id}/files.json"
    try:
        res = requests.get(url)
        files = res.json() or {}
        new_index = len(files)
    except:
        new_index = 0

    data = {
        "file_id": file_id,
        "type": file_type
    }
    requests.patch(f"{FIREBASE_URL}/users/{user_id}/files.json", json={str(new_index): data})

def save_shared_files(alias, files_data):
    shared_url = f"{FIREBASE_URL}/shared/{alias}.json"
    response = requests.put(shared_url, json=files_data)
    if response.status_code != 200:
        print("L·ªói khi l∆∞u alias v√†o /shared")

# C√°c handler functions
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Gi·ªØ nguy√™n n·ªôi dung h√†m start c·ªßa b·∫°n

async def newpost(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Gi·ªØ nguy√™n n·ªôi dung h√†m newpost

async def handle_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Gi·ªØ nguy√™n n·ªôi dung h√†m handle_content

async def process_media_group(mgid: str, user_id: int):
    # Gi·ªØ nguy√™n n·ªôi dung h√†m process_media_group

async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Gi·ªØ nguy√™n n·ªôi dung h√†m done

async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Gi·ªØ nguy√™n n·ªôi dung h√†m check

# ƒêƒÉng k√Ω c√°c handlers
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("check", check))
application.add_handler(CommandHandler("done", done))
application.add_handler(CommandHandler("newpost", newpost))
application.add_handler(MessageHandler(filters.TEXT | filters.PHOTO | filters.VIDEO, handle_content))

@web_server.route('/')
def home():
    return "üü¢ Bot ƒëang ho·∫°t ƒë·ªông"

@web_server.route(f"/{BOT_TOKEN}", methods=['POST'])
def telegram_webhook():
    json_str = request.get_data().decode('UTF-8')
    update = Update.de_json(json_str, application.bot)
    application.update_queue.put(update)
    return 'OK'

async def set_webhook():
    await application.bot.set_webhook(f"{WEBHOOK_URL}/{BOT_TOKEN}")

def run_flask():
    web_server.run(host='0.0.0.0', port=PORT)

async def main():
    await set_webhook()
    print("Webhook ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh th√†nh c√¥ng")
    
    # Ch·∫°y Flask trong m·ªôt thread ri√™ng
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    # B·∫Øt ƒë·∫ßu x·ª≠ l√Ω c√°c update
    await application.start()
    await asyncio.Event().wait()  # Ch·∫∑n ch∆∞∆°ng tr√¨nh ch√≠nh

if __name__ == '__main__':
    asyncio.run(main())
